openapi: 3.0.0
info:
  title: Login Service API
  description: Microservice for user authentication and management
  version: 1.0.0
  contact:
    name: Login Service Team
    email: login-service@example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: http://login-service:8080
    description: Docker container

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: login-service
                  version:
                    type: string
                    example: 1.0.0
                  uptime:
                    type: string
                    example: 1h30m45s

  /login/createuser:
    post:
      summary: Create a new user
      description: Creates a new user account in the system
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login/authuser:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a session token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUserRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          description: Username for the account
          example: john_doe
        password:
          type: string
          minLength: 6
          description: Password for the account
          example: securepassword123
        email:
          type: string
          format: email
          description: Email address for the account
          example: john.doe@example.com

    CreateUserResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        message:
          type: string
          description: Response message
          example: User created successfully
        user_id:
          type: string
          description: ID of the created user
          example: 550e8400-e29b-41d4-a716-446655440000

    AuthUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username for authentication
          example: john_doe
        password:
          type: string
          description: Password for authentication
          example: securepassword123

    AuthUserResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the authentication was successful
          example: true
        message:
          type: string
          description: Response message
          example: Authentication successful
        token:
          type: string
          description: Session token for authenticated user
          example: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        username:
          type: string
          description: Username
          example: john_doe
        email:
          type: string
          format: email
          description: Email address
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: 2024-01-15T10:30:00Z
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: 2024-01-15T10:30:00Z

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: false
        message:
          type: string
          description: Error message
          example: Invalid request body
        error:
          type: string
          description: Detailed error information
          example: username is required

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and management
